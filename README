Needs the following to work:
1) recent version of Python 2.x
2) Panda3D
3) PandaEPL
for joystick:
4) Pygame
for getting/receiving data from National Instrument card:
5) PyDAQmx

For projector: set resolution for 1280 x 720, refresh 120hz
National Instruments card (NiDAQ): ni pci-6221

On the Windows machine used for actual experiments, we are running:
Python 2.7.3, installed by Panda3d, and located in the Panda3d folder
Panda3d 1.8.1 located in c:\Panda3D-1.8.1
PandaEPL 0.9 is also located in Panda3d folder in python/lib/site-packages/pandaepl
Pygame 1.9.1 (joystick support) also in python/lib/site-packages/
PyDAQmx PyDAQmx-1.2.5.2-py2.7 (National Instrument board support)
          also in python/lib/site-packages/

On my Mac (OS 10.7.5), I am running for testing purposes:
Python 2.7.2 system python -> use arch -i386 ppython
Panda3d 1.8.1 is installed in /Developer/Panda3d
PandEPL 0.9 is installed in /Library/Python/2.7/site-packages/pandaepl
 (see below for fix for deprecation warning in pandaEPL)

Guiseppe log: Computer/Research Share (R:)/Buffalo Lab/Log files

Start the game:
ppython goBananas.py --no-eeg --resolution=1280x1024 -sTest
use --no-fs for small window


TrainBananas:
basic idea for starting: cross is off-center, move to center. (learn moving joystick moves crosshair)

Now put banana in center, and move to banana (learn to associate destination with banana)

Then start changing starting position of banana, so not always going to center.
(disassociate center with destination)


Config file training variable:

1.x = Left-Right Training.  No background.  Crosshairs in center of screen, and banana appears on left or right of crosshairs.  Subject has to push joystick to right or left to align the crosshairs with the banana.  Once the crosshairs hit the banana, the position is locked in place until all the reward is dispensed.  Then the tasks restarts with the banana in a new random location.
* 1.1 = Left only. [Perhaps need to add a variable to control max distance, and vary within that.  That's what increaseDistance and decreaseDistance should do.]
* 1.2 = Right only. [Perhaps need to add a variable to control max distance, and vary within that.  That's what increaseDistance and decreaseDistance should do.]
* 1.3 = Both, randomized location and distance.

2.x = Continuation of the left-right training in 1.x.  When the crosshairs align wih the target, some reward is dispensed, but the positions don't lock in and the crosshairs are allowed to leave the target, at which point reward stops being dispensed, until the crosshairs and target are aligned again.  The goal is to get the animal to leave the crosshairs 
* 2.1 = The window within which the crosshair has to fall is fairly large

3.x = Introducing forward movement. 
* 3.1 = Start out with banana centered, just go forward to get reward.
* 3.2 = Left-right to banana, with crosshairs on it, then go forward to get rewarded again. Forward movement is blocked until crosshair turns blue.  When crosshairs hit banana, further turning is blocked. Only forward movement is allowed.
* 3.3 = Require him to stop on his own on the banana.  As soon as he moves forward a bit, left and right turning is blocked, only more forward movement is allowed.    He is rewarded up to 6 beeps at a time for turning until the crosshairs are blue, and then he can only get more reward by actually going up to the banana.

4.x = Introducing the environment. 
* 4.0 = Starts off the same place as 3.3. Except the background is present and there is a massive, and very dense fog over it.  Press F to remove the fog and eluminate the environment/backround little by little.
* 4.1 = Remove the block for turning after he moves forward.
* 4.2 = Allow forward movement even when he's not with a blue cross.
* 4.25 = Remove FOV rays blocking turning.
* 4.3 = At beginning of new trial, face same direction as end of previous one. FOV rays blocking turning still on.
* 4.35 = Remove FOV rays blocking turning from 4.3.

5.x = More bananas come in.
* 5.1 = Same as 4.25, except now there are multiple bananas that he has to go around and pick up.  Position resets to the center and faces the original 0-header position after gathering each batch of bananas.
* 5.2 = A given number of bananas appear on the field and you have to go gather them all, then a new set appears.  Position doesn't reset, neither does header direction.

Bug in joystick implementation:
Add the word float in line 85, Joystick.py:
change:
self.threshold = Options.getInstance().get().js_zero_threshold
to:
self.threshold = float(Options.getInstance().get().js_zero_threshold)
otherwise the threshold option will not work.

In the following files, line numbers, delete the .asList() part. For example in
ModelBase.py, line 60
change:
for nodePath in self.retrNodePath().findAllMatches("**/" + str(tag) + "/**").asList():
to:
for nodePath in self.retrNodePath().findAllMatches("**/" + str(tag) + "/**"):
Vr.py, line 206
VrObject.py, line 86