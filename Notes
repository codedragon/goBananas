Installing 64bit version:
uninstall old one (save out sample programs, since this folder doesn't
come with development version)
install panda3d, Panda3D-2014.06.24-346.exe, known, tested
open up pycharm, re-set interpreter, and let it install pip and setuptools
install numpy from here: http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy
install pygame: http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame
install pandaEPL (fix stuff)
install pydaqmx (can use pip)

To run just one test:
python test_goBananas.py TestGoBananas.test_position_bananas

Log Files:
logs when subject collides with banana ('Yummy') (200)
logs every time gets a reward ('Beep') (201)
logs when reward is over and banana disappears ('Finished')
logs when new trial starts ('NewTrial') (1000 + trial number)

For projector: set resolution for 1280 x 720, refresh 120hz
or perhaps 1280x800? Conflict about 'native' resolution. Using
1280x800 successfully with trainingBananas, but looks bad with
goBananas, using 1024x768 instead there.

aspectRatio  gobananas : 1.333  bananarchy:  1.25
resolution       1024x768          1280x1024
FOV              60:46.82          60:49.58

gobananas, camera:
pos		LPoint3f(0, 0, 0)
fov		LVecBase2f(60, 46.8265)
near		0.10000000149
far		100000.0
aspectratio	1.33333337307

Tests are becoming quite problematic. Starting to require doing stuff in environment.
How to get around this?

Panda3d
Point3 Class comes from Panda3d:
A three-component point in space (as opposed to a vector, which represents a direction and a distance).
(float x, float y, float z)
myNodePath.setHpr([h],[p],[r])
myNodePath.setH([h]) heading: right, left (rotate around z axis)
myNodePath.setP([p]) pitch: climb, dive (rotate around x axis)
myNodePath.setR([r]) roll: cartwheels  (rotate around y axis)

Normal coordinate system, unlike ActionScript
       |
(-, +) | (+, +)
-------+--------
(-, -) | (+, -)
       |

Trying to figure out Camera/LensNode/isInView.
According to manual, should be able to use LensNode, but can't figure out what that means.
It appears that the default lensnode is self.base.camNode, but it appears to not be at the
same position as the camera? This works, but doesn't show banana as in view, even when it is:
print self.base.camNode.isInView(self.banana.getPos())
print self.base.camNode.isInView(entry.getIntoNodePath().getPos())
And these do not show the same position:
print self.base.camera.getPos()
print self.base.cam.getPos()

More attributes to investigate:
DepthOffsetAttrib: Causes the Z-buffer to treat the object as if it were closer or farther
DeptTestAttrib: Alters teh way the Z-buffer affects the model.
(also setNear)

What happens when you hit this object?  PandaEPL
self.myModel.setCollisionCallback(MovingObject.chooseme)
chooseme can be:
MovingObject.handleRepelCollision # don't let colliding objects to into one another
MovingObject.handleSlideCollision # colliding objects slide along each other

if this is an object you care about the collision:
make a method:
self.myModel.collideMe
where:
def collideMe(self, collisionInfoList):
allows you to use this:
collisionInfoList[0].getInto().getIdentifier()
to get the id of what you collided with.

******* Wish List Item *********
Would be awesome to be able to then use the identifier to get information
about the object, position, for example. Now have to do it in a rather
round-about fashion.


From Kiril:
(I have changed training steps somewhat)

# 5.2 - fully trained                                                                                         
# 3.1   fullTurningSpeed = 0                                                                                  
# >= 3  fullForwardSpeed = 2.8                                                                                
# < 3   fullForwardSpeed = 0                                                                                  
# >= 2  fullTurningSpeed = 55                                                                                 
# < 2   fullTurningSpeed = 200     

Pandaepl has a state dictionary, which is written to disk. This is to save the
state between runs of the experiment, in case the subject doesn't finish the
experiment, we know where he/she left off. I don't think this is necessary for
us, but may want to implement it later.

I don't know what Pandaepl is doing, but this behavior is bizarre:
if I initiate two variables with the same key in the config dictionary:
x = config['my_default']
y = config['my_default']
this somehow links x and y, so that if I now change x, y will also change. WTF?
Bad use of scope!

PandaEPL is doing something funny with the joystick input. I have tested the input from
pygame, and the joystick numbers are quite accurate, but I get events in PandaEPL from
the joystick of magnitude over 0.2 (the default threshold) when the joystick is not being
touched. I think the signal is not being cleared, (maybe because of the threshold?). The
signal is always are the same magnitude, until the joystick is touched again, and I never
see this directly from pygame. It sometimes causes the view to 'skip' when the joystick
is not being touched.

Globals:
LogException = <class 'pandaepl.Exceptions.LogException'>
Log = pandaepl.Log.Log
TempObject = pandaepl.TempObject.TempObject
Point2 = <type 'libpanda.LPoint2f'>
Camera = pandaepl.Camera.Camera
Point4 = <type 'libpanda.LPoint4f'>
IdentifierException = <class 'pandaepl.Exceptions.IdentifierException'>
timedCall = <function timedCall at 0x0240F7F0>
MovingObject = pandaepl.MovingObject.MovingObject
PandaEplException = <class 'pandaepl.Exceptions.PandaEplException'>
eegException = <class 'pandaepl.Exceptions.eegException'>
SoundException = <class 'pandaepl.Exceptions.SoundException'>
ExpFog = pandaepl.ExpFog.ExpFog
LinearFog = pandaepl.LinearFog.LinearFog
SessionException = <class 'pandaepl.Exceptions.SessionException'>
microtime = <function microtime at 0x0240F770>
VLQ = pandaepl.VideoLogQueue.VideoLogQueue
mstime = <function mstime at 0x0240F7B0>
optCmd = [window-type none auto-flip 0 win-size 800 600 fullscreen 0 show-frame-rate-meter 0 framebuffer-multisample 1]
Instructions = pandaepl.Instructions.Instructions
SimpleSound = pandaepl.SimpleSound.SimpleSound
Task = pandaepl.Task.Task
timestamp = (1381786796040L, 1L)
VBase3 = <type 'libpanda.LVecBase3f'>
VBase2 = <type 'libpanda.LVecBase2f'>
VBase4 = <type 'libpanda.LVecBase4f'>
direct = <module 'direct' from 'C:\Panda3D-1.8.1\direct\__init__.pyc'>
PointLight = pandaepl.PointLight.PointLight
Avatar = pandaepl.Avatar.Avatar
returnVal = [window-type none auto-flip 0 win-size 800 600 fullscreen 0 show-frame-rate-meter 0 framebuffer-multisample 1]
DirectionalLight = pandaepl.DirectionalLight.DirectionalLight
Model = pandaepl.Model.Model
Options = pandaepl.Options.Options
ConfLoadException = <class 'pandaepl.Exceptions.ConfLoadException'>
MainLoopException = <class 'pandaepl.Exceptions.MainLoopException'>
Text = pandaepl.Text.Text
Image = pandaepl.Image.Image
AmbientLight = pandaepl.AmbientLight.AmbientLight
Vr = pandaepl.Vr.Vr
Point3 = <type 'libpanda.LPoint3f'>
Vec2 = <type 'libpanda.LVector2f'>
Vec3 = <type 'libpanda.LVector3f'>
Conf = pandaepl.Conf.Conf
Experiment = pandaepl.Experiment.Experiment
SpotLight = pandaepl.SpotLight.SpotLight
LogQueue = pandaepl.LogQueue.LogQueue
