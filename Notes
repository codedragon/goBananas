importing with_statement from future in test. is this a problem for windows?

Point3 Class comes from Panda3d:
A three-component point in space (as opposed to a vector, which represents a direction and a distance).
(float x, float y, float z)


What happens when you hit this object?
self.myModel.setCollisionCallback(MovingObject.chooseme)
chooseme can be:
MovingObject.handleRepelCollision # don't let colliding objects to into one another
MovingObject.handleSlideCollision # colliding objects slide along each other

if this is an object you care about the collision:
make a method:
self.myModel.collideMe
where:
def collideMe(self, collisionInfoList):
allows you to use this:
collisionInfoList[0].getInto().getIdentifier()
to get the id of what you collided with.

# 5.2 - fully trained                                                                                         
# 3.1   fullTurningSpeed = 0                                                                                  
# >= 3  fullForwardSpeed = 2.8                                                                                
# < 3   fullForwardSpeed = 0                                                                                  
# >= 2  fullTurningSpeed = 55                                                                                 
# < 2   fullTurningSpeed = 200     

Globals:
LogException = <class 'pandaepl.Exceptions.LogException'>
Log = pandaepl.Log.Log
TempObject = pandaepl.TempObject.TempObject
Point2 = <type 'libpanda.LPoint2f'>
Camera = pandaepl.Camera.Camera
Point4 = <type 'libpanda.LPoint4f'>
IdentifierException = <class 'pandaepl.Exceptions.IdentifierException'>
timedCall = <function timedCall at 0x0240F7F0>
MovingObject = pandaepl.MovingObject.MovingObject
PandaEplException = <class 'pandaepl.Exceptions.PandaEplException'>
eegException = <class 'pandaepl.Exceptions.eegException'>
SoundException = <class 'pandaepl.Exceptions.SoundException'>
ExpFog = pandaepl.ExpFog.ExpFog
LinearFog = pandaepl.LinearFog.LinearFog
SessionException = <class 'pandaepl.Exceptions.SessionException'>
microtime = <function microtime at 0x0240F770>
VLQ = pandaepl.VideoLogQueue.VideoLogQueue
mstime = <function mstime at 0x0240F7B0>
optCmd = [window-type none auto-flip 0 win-size 800 600 fullscreen 0 show-frame-rate-meter 0 framebuffer-multisample 1]
Instructions = pandaepl.Instructions.Instructions
SimpleSound = pandaepl.SimpleSound.SimpleSound
Task = pandaepl.Task.Task
timestamp = (1381786796040L, 1L)
VBase3 = <type 'libpanda.LVecBase3f'>
VBase2 = <type 'libpanda.LVecBase2f'>
VBase4 = <type 'libpanda.LVecBase4f'>
direct = <module 'direct' from 'C:\Panda3D-1.8.1\direct\__init__.pyc'>
PointLight = pandaepl.PointLight.PointLight
Avatar = pandaepl.Avatar.Avatar
returnVal = [window-type none auto-flip 0 win-size 800 600 fullscreen 0 show-frame-rate-meter 0 framebuffer-multisample 1]
DirectionalLight = pandaepl.DirectionalLight.DirectionalLight
Model = pandaepl.Model.Model
Options = pandaepl.Options.Options
ConfLoadException = <class 'pandaepl.Exceptions.ConfLoadException'>
MainLoopException = <class 'pandaepl.Exceptions.MainLoopException'>
Text = pandaepl.Text.Text
Image = pandaepl.Image.Image
AmbientLight = pandaepl.AmbientLight.AmbientLight
Vr = pandaepl.Vr.Vr
Point3 = <type 'libpanda.LPoint3f'>
Vec2 = <type 'libpanda.LVector2f'>
Vec3 = <type 'libpanda.LVector3f'>
Conf = pandaepl.Conf.Conf
Experiment = pandaepl.Experiment.Experiment
SpotLight = pandaepl.SpotLight.SpotLight
LogQueue = pandaepl.LogQueue.LogQueue
